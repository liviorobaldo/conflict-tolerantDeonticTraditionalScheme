@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains the following statements:
# - (1) "John is prohibited to not leave" (i.e., "John is not permitted to not leave", i.e., "John is not permitted to stay").
# - (2) "John leaves".
# From (1), it is inferred that (3) "John is obliged to leave" through the SPARQL rules implementing the Deontic Traditional Scheme,
# specifically by the one implementing ¬PE(p)=>OB(¬p). Then, from (2) and (3), it is inferred that (2) complies with (3).
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Leave rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.


########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is prohibited to not leave.
[rdf:type :false,:hold; rdf:subject soa:enlj; rdf:predicate rdf:type; rdf:object :Permitted].
soa:enlj :not soa:elj.

#John leaves.
soa:elj rdf:type :Rexist,soa:Leave; soa:has-agent soa:John.

