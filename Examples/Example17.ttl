@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains the following statements:
# - (1) "John pays at the parking meter in Sketty by card".
# - (2) "The parking meter in Sketty only accepts cash".
# In addition, as for Example2.ttl, Example10.ttl, and Example13.ttl, the state of affairs includes two implications stating that if 
# the instrument for paying is cash then it is not card and if the instrument is card then it is not cash. 
# - From (1) and (2), it is inferred that (3) "John pays at the parking meter in Sketty in cash".
# - From (1), it is inferred that (4) "John does not pay at the parking meter in Sketty in cash".
# - From (3), it is inferred that (5) "John does not pay at the parking meter in Sketty by card".
# Finally, it is inferred that (1) and (5) are in contradiction as well as (3) and (4).
########################################################################################################################################

########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.
soa:has-recipient rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John pays at the parking meter in Sketty by card.
soa:epscj a soa:Pay,:Rexist; soa:has-agent soa:John; soa:has-recipient soa:pmSketty; soa:has-instrument soa:card.
soa:psSketty rdf:type soa:parkingSpot.
soa:pmSketty soa:associated-with soa:psSketty.

#The following rule encodes the contextual constraint "The parking meter in Sketty only accepts cash".
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{[rdf:type :necessary, :hold; rdf:subject ?ep; rdf:predicate soa:has-instrument; rdf:object soa:cash]}
	WHERE{?ep rdf:type soa:Pay; soa:has-recipient ?pm. ?pm soa:associated-with soa:psSketty.
		  NOT EXISTS{?r rdf:type :necessary, :hold; rdf:subject ?ep; rdf:predicate soa:has-instrument; rdf:object soa:cash}}"""].

#The following (domain knowledge) SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,cash))=>¬has-instrument(e,card)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card]}
						WHERE{?e soa:has-instrument soa:cash
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card}}"""^^xsd:string].
						
#The following SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,card))=>¬has-instrument(e,cash)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash]}
						WHERE{?e soa:has-instrument soa:card
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash}}"""^^xsd:string].
