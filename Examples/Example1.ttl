@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains these two pairs of facts in contradiction:
# - (1) "John leaves" and (2) "John does not leaves"
# - (3) "Jack pays £3 in cash" and (4) "Jack does not pay £3 in cash"
# (1) contradicts (2) and (3) contradicts (4). In the inferred knowledge graph it will be derived that:
# - The fact that "soa:elj rdf:type :Rexist." holds true, i.e., Rexist(soa:elj) in Hobbs's logic, is in contradiction with the fact that
# 	the same triple holds false, i.e., ¬Rexist(soa:elj) in Hobbs's logic; ¬Rexist(soa:elj) is derived from "soa:eljn rdf:type :Rexist" 
#	and "soa:eljn :not soa:elj". Note that, for the same reason, ¬Rexist(soa:eljn) is also derived and this is symmetrically in 
#	contradiction with Rexist(soa:eljn). Therefore, *two* symmetric is-in-contradiction-with are derived from (1) and (2).
# - Similarly the fact that "soa:epj rdf:type :Rexist." holds true is in contradiction with the fact that the same triple holds false.
#	*two* symmetric is-in-contradiction-with are derived from (3) and (4) as well.
# NB. Deriving *four* contradictions out of the *two* examples (1)-(2) and (3)-(4) is not so "weird" or "unusual". Also OWL reasoners, 
# e.g., Hermit, usually derive multiple contradictions from the same pairs of inconsistent facts, while providing a different chain of
# explanations for each derived contradiction.
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Leave rdf:type rdfs:Class, :Eventuality.
soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-object rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.


########################################################################################################################################
# Input facts:
########################################################################################################################################

#John leaves:
soa:elj rdf:type :Rexist, soa:Leave; soa:has-agent soa:John.

#John does not leaves:
soa:enlj :not soa:elj; rdf:type :Rexist.

#Jack pays £3 in cash:
soa:epj rdf:type :Rexist, soa:Pay; soa:has-agent soa:Jack; soa:has-object soa:3pounds; soa:has-instrument soa:cash.

#Jack does not pay £3 in cash:
soa:enpj :not soa:epj; rdf:type :Rexist.
