@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains the following statements:
# - (1) "It is obligatory to leave the building", intended as "Every human inside the building is obliged to leave the building".
# - (2) "It is obligatory to not leave the building", intended as "Every human inside the building is obliged to not leave the building".
# (1) and (2) are formalized as SPARQL rules. The state of affairs contain then two individuals (soa:John and soa:Bill) who are humans
# inside the building. From (1) and (2) it is inferred that they are both obliged to leave and to not leave and, therefore, a conflict
# is inferred among each of the two pairs of obligations as in the previous examples.
########################################################################################################################################

########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Leave rdf:type rdfs:Class, :Eventuality.
soa:Be rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-inside-location rdf:type rdf:Property, :ThematicRole.
soa:has-from-location rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is a human inside the building.
soa:ebj rdf:type soa:Be; soa:has-agent soa:John; soa:has-inside-location soa:theBuilding. soa:John rdf:type soa:Human.

#Bill is a human inside the building.
soa:ebb rdf:type soa:Be; soa:has-agent soa:Bill; soa:has-inside-location soa:theBuilding. soa:Bill rdf:type soa:Human.

#The following rule encode the norm "Every human inside the building is obliged to leave the building"
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{[rdf:type soa:Leave, :Obligatory; soa:has-agent ?u; soa:has-from-location soa:theBuilding]}
						WHERE{?e rdf:type soa:Be; soa:has-agent ?u; soa:has-inside-location soa:theBuilding. ?u rdf:type soa:Human.
							  NOT EXISTS{?r rdf:type soa:Leave, :Obligatory; soa:has-agent ?u; soa:has-from-location soa:theBuilding}}"""].

#The following rule encode the norm "Every human inside the building is obliged to not leave the building"
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{[rdf:type :Obligatory; :not [rdf:type soa:Leave; soa:has-agent ?u; soa:has-from-location soa:theBuilding]]}
						WHERE{?e rdf:type soa:Be; soa:has-agent ?u; soa:has-inside-location soa:theBuilding. ?u rdf:type soa:Human.
							  NOT EXISTS{?r rdf:type :Obligatory; :not ?ri.
										 ?ri rdf:type soa:Leave; soa:has-agent ?u; soa:has-from-location soa:theBuilding}}"""].