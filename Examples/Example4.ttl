@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains two derivations via the inferences of the Deontic Traditional Scheme:
# - (1) "John is prohibited to leave", encoded as "John is not permitted to leave".
#	From (1), it is derived: (2) "John is not obliged to leave" and (3) "John is obliged to not leave" (i.e., John is obliged to stay).
#	Then, from (3) it is also derived: (4) "John is permitted to not leave".
# - (5) "John is not obliged to eat" and (6) "John is not obliged to not eat" (i.e., John is not obliged to starve).
#	From (5) and (6), it is derived: (7) "It is optional for John to eat" and (8) "It is optional for John to not eat". Then, from both
#   (7) and (8), it is also derived: (9) "John is permitted to eat" and (10) "John is permitted to not eat".
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Leave rdf:type rdfs:Class, :Eventuality.
soa:Eat rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.


########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is not permitted to leave.
[rdf:type :false,:hold; rdf:subject soa:elj; rdf:predicate rdf:type; rdf:object :Permitted].
soa:elj rdf:type soa:Leave; soa:has-agent soa:John; :not soa:enlj.

#John is not obliged to eat
[rdf:type :false,:hold; rdf:subject soa:eej; rdf:predicate rdf:type; rdf:object :Obligatory].
soa:eej rdf:type soa:Eat; soa:has-agent soa:John.

#John is not obliged to not eat
[rdf:type :false,:hold; rdf:subject soa:enej; rdf:predicate rdf:type; rdf:object :Obligatory].
soa:enej :not soa:eej.
