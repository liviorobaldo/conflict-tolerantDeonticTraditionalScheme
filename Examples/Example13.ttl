@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains the following statements:
# - (1) "It is obligatory to pay in cash".
# - (2) "It is obligatory to pay in cash".
# - (3) "John pays".
# - (4) "Bill is not permitted to pay".
# In addition, the state of affairs state that (1) and (2) refers to any payment (done by anyone, anytime, anywhere, etc.), i.e., that
# all actions of paying in the state of affairs are instantiations of the same abstract eventuality soa:epa. In real contexts, soa:epa
# must denote *the* contextually relevant payment the state of affairs is about, e.g., "the payment of John's taxes for this year".
# Here, for simplicity, we just state that the state of affairs refer to any payment.
# Finally, as for Example2.ttl and Example10.ttl, the state of affairs includes two implications stating that if the instrument for 
# paying is cash then it is not card and if the instrument is card then it is not cash. 
# The SPARQL rules defined infers: 
# - From (1), (2), and (3) that (5) "John is obliged to pay in cash" and (6) "John is obliged to pay by card".
# - From (5) and (6) that the two obligatory actions of John are instantiations of soa:epa, then that they are connected by ":not",
#   then, through the rules of the Deontic Traditional Scheme, that they are both permitted and not permitted, and, finally, that 
#	there are conflict between the facts that they and their negations are both permitted and not permitted.
# In addition:
# - From (1), (2), and (4), a similar set of conflicts is generated about the non-permitted payment of Bill. However, in this case,
#	two further conflicts are generated between the fact that Bill is not permitted to pay and the fact that Bill is obliged (thereby
#	permitted) to pay in cash as well as the the fact that Bill is obliged (thereby permitted) to pay by card.
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John pays.
soa:epj rdf:type soa:Pay,:Rexist; soa:has-agent soa:John.

#Bill is not permitted to pay.
[rdf:type :false,:hold; rdf:subject soa:epb; rdf:predicate rdf:type; rdf:object :Permitted].
soa:epb rdf:type soa:Pay; soa:has-agent soa:Bill.

#This rule states all actions of paying in the state of affairs are instantiations of the same abstract eventuality soa:epa. In real 
#contexts, soa:epa must denote *the* contextually relevant payment the state of affairs is about, e.g., "the payment of John's taxes 
#for this year". Here, for simplicity, we just state that the state of affairs refer to any payment. To denote another contextually 
#relevant payment, we must of course add triples to WHERE clause fit to identify it.
soa:eap rdf:type soa:Pay.
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?e :instantiates soa:eap}
						WHERE{?e rdf:type soa:Pay}"""^^xsd:string].

#The following rule encode the norm "It is obligatory to pay in cash", encoded as "whoever is paying is obliged to pay in cash".
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{[rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:cash]}
	WHERE{?e rdf:type soa:Pay; soa:has-agent ?u. NOT EXISTS{?e rdf:type :Obligatory}
		  NOT EXISTS{?r rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:cash}}"""].
		  
#The following rule encode the norm "It is obligatory to pay by card", encoded as "whoever is paying is obliged to pay by card".
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{[rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:card]}
	WHERE{?e rdf:type soa:Pay; soa:has-agent ?u. NOT EXISTS{?e rdf:type :Obligatory}
		  NOT EXISTS{?r rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:card}}"""].
							  
#The following (domain knowledge) SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,cash))=>¬has-instrument(e,card)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card]}
						WHERE{?e soa:has-instrument soa:cash
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card}}"""^^xsd:string].
						
#The following SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,card))=>¬has-instrument(e,cash)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash]}
						WHERE{?e soa:has-instrument soa:card
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash}}"""^^xsd:string].
