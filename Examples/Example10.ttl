@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains these two sentences:
# - (1) "John is obliged to pay in cash" and (2) "John is obliged to pay £3 by card".
# Similarly to Example3.ttl, it is pragmatically inferred through one of the rules in ctDTS.ttl that (1) and (2) are two instantiations
# of the same abstract eventuality and, in particular, that they are connected by the ":not" RDF property.
# Given this assumption, in the inferred knowledge graph it will be derived that:
# - From (1), that (3) "John is prohibited to pay by card".
# - From (2) and (3), that (2) is in conflict with (3).
# - Symmetrically, it will inferred that (4) "John is prohibited to pay in cash" and, therefore, that (1) is in conflict with (4).
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is obliged to pay in cash.
soa:epjcash rdf:type soa:Pay, :Obligatory; soa:has-instrument soa:cash.

#John is obliged to pay by card.
soa:epjcard rdf:type soa:Pay, :Obligatory; soa:has-instrument soa:card.

#The following (domain knowledge) SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,cash))=>¬has-instrument(e,card)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card]}
						WHERE{?e soa:has-instrument soa:cash
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card}}"""^^xsd:string].
						
#The following SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,card))=>¬has-instrument(e,cash)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash]}
						WHERE{?e soa:has-instrument soa:card
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash}}"""^^xsd:string].
