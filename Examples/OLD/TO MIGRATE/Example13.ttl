@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix soa: <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme/soa#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


########################################################################################################################################
# Description:
#---------------------------------------------------------------------------------------------------------------------------------------
# This example contains the following statements:
# - (1) "It is obligatory to pay in cash", encoded as "Every human is obliged to pay in cash".
# - (2) "It is obligatory to pay by card", encoded as "Every human is obliged to pay by card".
# - (3) "John pays" and "Bill pays".
# As for Example2.ttl and Example10.ttl, the state of affairs includes two implications stating that if the instrument for paying is 
# cash then it is not card and if the instrument is card then it is not cash. 
# It is inferred that: 
# - From (1), (2), and (3) that (5) "John is obliged to pay in cash" and (6) "John is obliged to pay by card" (and same for Bill).
# - From (5) and (6) that the two obligatory actions of John are connected by ":not" (and same for Bill's). This is done through
# 	a SPARQL rule in the file ctDTS.ttl inferring that (5) and (6) are two instantiations of the same abstract eventuality and, in 
#	particular, that they are connected by the ":not" RDF property. Same for Bill. This is actually a pragmatic implicature, as 
#	explained in the paper.
# - Through the rules of the Deontic Traditional Scheme, that they are both permitted and not permitted, and, finally, that 
#	there are conflict between the facts that they and their negations are both permitted and not permitted.
########################################################################################################################################


########################################################################################################################################
# Eventuality types and thematic roles
########################################################################################################################################

soa:Pay rdf:type rdfs:Class, :Eventuality.
soa:has-agent rdf:type rdf:Property, :ThematicRole.
soa:has-instrument rdf:type rdf:Property, :ThematicRole.

########################################################################################################################################
# Input facts:
########################################################################################################################################

#John is a human.
soa:John rdf:type soa:Human.

#Bill is a human.
soa:Bill rdf:type soa:Human.

#The following rule encode the norm "It is obligatory to pay in cash", encoded as "Every human is obliged to pay in cash".
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{[rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:cash]}
	WHERE{?u rdf:type soa:Human
		  NOT EXISTS{?r rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:cash}}"""].
		  
#The following rule encode the norm "It is obligatory to pay by card", encoded as "Every human is obliged to pay by card".
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{[rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:card]}
	WHERE{?u rdf:type soa:Human
		  NOT EXISTS{?r rdf:type soa:Pay,:Obligatory; soa:has-agent ?u; soa:has-instrument soa:card}}"""].
		  							  
#The following (domain knowledge) SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,cash))=>¬has-instrument(e,card)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card]}
						WHERE{?e soa:has-instrument soa:cash
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:card}}"""^^xsd:string].
						
#The following SPARQL rule states that if the payment has been done by cash, it is false that it has been done by card.
#In Hobbs': Ve[(Pay(e)^has-instrument(e,card))=>¬has-instrument(e,cash)].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{[rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash]}
						WHERE{?e soa:has-instrument soa:card
						  NOT EXISTS{?r rdf:type :false,:hold; rdf:subject ?e; rdf:predicate soa:has-instrument; rdf:object soa:cash}}"""^^xsd:string].
