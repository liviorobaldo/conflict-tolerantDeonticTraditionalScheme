@prefix : <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@base <https://w3id.org/ontology/conflict-tolerantdeontictraditionalscheme#> .


#===========================================================================================================================================================
# Inference rules
#
# :InferenceRule is a specialized class designed to store SPARQL rules in the CONSTRUCT-WHERE format for execution. Each instance of this class is 
# associated with an xsd:string via the :has-sparql-code property, which defines the corresponding SPARQL rule. The automated reasoner first collects 
# all individuals belonging to the :InferenceRule class. It then iteratively executes the SPARQL rules specified in the :has-sparql-code property until 
# no new individuals are inferred.
#===========================================================================================================================================================

:InferenceRule rdf:type rdfs:Class.
:has-sparql-code rdf:type rdf:Property;
	rdfs:domain :InferenceRule;
	rdfs:range xsd:string.


#===========================================================================================================================================================
# RDF schema inferences: rdfs:subClassOf, rdfs:domain, rdfs:range, and rdfs:subPropertyOf.
#===========================================================================================================================================================

[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s rdf:type ?c}WHERE{$this rdfs:subClassOf+ ?c. ?s rdf:type $this}"""].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s rdf:type ?c}WHERE{$this rdfs:domain ?c. ?s $this ?o}"""].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?o rdf:type ?c}WHERE{$this rdfs:range ?c. ?s $this ?o}"""].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s ?p ?o}WHERE{$this rdfs:subPropertyOf ?p. ?s $this ?o}"""].


#===========================================================================================================================================================
# Eventualities, modalities, thematic roles, predicates 'not', 'and', and 'or'.
#===========================================================================================================================================================

#Top classes:
:Eventuality rdf:type rdfs:Class.
:EventualityType rdf:type rdfs:Class.
:Modality rdf:type rdfs:Class.
:ThematicRole rdf:type rdfs:Class.

#Rexist and Subsist modality:
:Rexist rdf:type rdfs:Class,:Modality.
:Subsist rdf:type rdfs:Class,:Modality.

#Deontic modalities:
:DeonticModality rdf:type rdfs:Class; rdfs:subClassOf :Modality.
:Obligatory rdf:type rdfs:Class,:DeonticModality.
:Permitted rdf:type rdfs:Class,:DeonticModality.
:Optional rdf:type rdfs:Class,:DeonticModality.

#Predicates 'not', 'and', and 'or'.
:not rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :Eventuality.
:and1 rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :Eventuality.
:and2 rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :Eventuality.
:or1 rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :Eventuality.
:or2 rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :Eventuality.


#===========================================================================================================================================================
# Axiomatization of AbstractEventuality, Instance, and the property 'instantiates'
#===========================================================================================================================================================

#Both AbstractEventuality and Instance are subclasses of Eventuality
:AbstractEventuality rdf:type rdfs:Class; rdfs:subClassOf :Eventuality.
:Instance rdf:type rdfs:Class; rdfs:subClassOf :Eventuality.

#Property 'instantiates', to relate eventualities (either abstract or instances) with abstract eventualities
:instantiates rdf:type rdf:Property; rdfs:domain :Eventuality; rdfs:range :AbstractEventuality.

#AbstractEventuality and Instance are disjoint. If they share an individual, a contradiction is inferred.
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{<<?e rdf:type :AbstractEventuality>> :is-in-contradiction-with <<?e rdf:type :Instance>>}
						WHERE{?e rdf:type :AbstractEventuality, :Instance}"""^^xsd:string].

#The Subsist modality and the deontic modalities applies exclusively to abstract eventualities.
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{?e rdf:type :AbstractEventuality}
						WHERE{VALUES ?m{:Subsist :Obligatory :Permitted :Optional}
							  {?e rdf:type ?m}UNION{<<?e rdf:type ?m>> rdf:type :false}}"""^^xsd:string].

#The Rexist modality applies exclusively to instances.
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{?e rdf:type :Instance}
						WHERE{{?e rdf:type :Rexist}UNION{<<?e rdf:type :Rexist>> rdf:type :false}}"""^^xsd:string].

#If an abstract eventuality (instance) is involved in the predicates 'not', 'and', or 'or', then also the other eventualities involved 
#in the same predicates are abstract eventuality (instance).
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?eao rdf:type ?C}
						WHERE{VALUES ?C{:AbstractEventuality :Instance} ?e rdf:type ?C.
							  VALUES ?P{:not :and1 :and2 :or1 :or2} {?e ?P ?eao}UNION{?eao ?P ?e}}"""^^xsd:string].

#The following rule infers that if two eventualities instantiate the same abstract eventuality but differ in at least one thematic role 
#(specifically, if one is asserted to have a certain value for that role while the other is asserted not to), then the two eventualities 
#are inferred to be linked by the 'not' property: if one of the two instantiations exists, the other does not, and vice versa.
#∀e1,e2,ea,T R,v[(instantiates(e1,ea)∧instantiates(e1,ea)∧TR(e1,v)∧¬TR(e2,v))→not(e1,e2)]
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?e1 :not ?e2}
						WHERE{?e1 :instantiates+ ?ea. ?e2 :instantiates+ ?ea. FILTER(?e1!=?e2)  
							  ?tr rdf:type :ThematicRole. ?e1 ?tr ?v. <<?e2 ?tr ?v>> rdf:type :false}"""^^xsd:string].


#===========================================================================================================================================================
# PRAGMATIC IMPLICATURES ON 'instantiates': 
#===========================================================================================================================================================

#It is pragmatically/contextually assumed that all statements refer to the same context. Therefore, if one eventuality 'ei' is more specific than another 
#eventuality 'ea' (meaning that they describe the same action or event, the set of thematic roles of ei is a superset of that of ea, and the common 
#thematic roles have the same values) then it is inferred that ei instantiates ea.
#∀ea,ei[(AbstractEventuality(ea)∧ET(ea)∧ET(ei)∧¬∃tr,va[tr(ea, va)∧¬∃vi[tr(ei, vi)]]∧¬∃tr,va,vi[tr(ea,va)∧tr(ei,vi)∧(va!=vi)])→instantiates(ei,ea)]
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?ei :instantiates ?ea}
	WHERE{?ea rdf:type :AbstractEventuality,?ET. ?ei rdf:type ?ET. ?ET rdf:type :EventualityType.
		  NOT EXISTS{?tr rdf:type :ThematicRole. ?ea ?tr ?va. NOT EXISTS{?ei ?tr ?vi}}
		  NOT EXISTS{?tr rdf:type :ThematicRole. ?ea ?tr ?va. ?ei ?tr ?vi. FILTER(?va!=?vi)}}"""].

#It is pragmatically/contextually assumed that if two eventualities, 'ei1' and 'ei2', share the same type, modality, and agent, then the state of 
#affairs includes an abstract eventuality that both 'ei1' and 'ei2' instantiate. The framework currently assumes that all eventualities occur 
#"here" and "now" (i.e., without temporal or spatial dimensions), so it is not possible for an agent to perform the same action twice.
#∀ei1,ei2,ET,M,a[(ET(ei1)∧ET(ei2)∧M(ei1)∧M(ei2)∧has-agent(ei1,a)∧has-agent(ei2,a))→∃ea[instantiates(ei1,ea)∧instantiates(ei2,ea)]]
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?ei1 :instantiates ?ea. ?ei2 :instantiates ?ea}
						WHERE{?ei1 rdf:type ?ET,?M; soa:has-agent ?a. ?ei2 rdf:type ?ET,?M; soa:has-agent ?a. 
							  ?ET rdf:type :EventualityType. ?M rdf:type/rdfs:subClassOf* :Modality.
							  FILTER(STR(?ei1)<STR(?ei2)) BIND(BNode() AS ?ea) NOT EXISTS{?ei1 :instantiates ?ear. ?ei2 :instantiates ?ear}}"""].


#===========================================================================================================================================================
# Semantical Embedding: truth, falsity, necessity, contradictions and conflicts.
#===========================================================================================================================================================

:true rdf:type rdfs:Class; rdfs:subClassOf rdf:Statement.
:false rdf:type rdfs:Class; rdfs:subClassOf rdf:Statement.
:necessary rdf:type rdfs:Class; rdfs:subClassOf rdf:Statement.
:possible rdf:type rdfs:Class; rdfs:subClassOf rdf:Statement.

:is-in-contradiction-with rdf:type rdf:Property; rdfs:domain rdf:Statement; rdfs:range rdf:Statement.
:is-in-conflict-with rdf:type rdf:Property; rdfs:domain rdf:Statement; rdfs:range rdf:Statement.

#If the reification of a triple belong to the class :true, the triple may be added to the knowledge graph.
[rdf:type :InferenceRule; :has-sparql-code """CONSTRUCT{?s ?p ?o}WHERE{<<?s ?p ?o>> rdf:type :true}"""].

#Same if the reification belongs to the class :necessary (□A→A)
[rdf:type :InferenceRule; :has-sparql-code """CONSTRUCT{?s ?p ?o}WHERE{<<?s ?p ?o>> rdf:type :necessary}"""].

#If the knowledge graph contains both a statement and its negation, a contradiction is inferred, unless the object is a deontic modality,
#in which case a conflict is inferred (through the rule below), not a contradiction.
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{<<<<?s ?p ?o>> rdf:type :true>> :is-in-contradiction-with 
								  <<<<?s ?p ?o>> rdf:type :false>>}
						WHERE{?s ?p ?o. <<?s ?p ?o>> rdf:type :false. NOT EXISTS{?o rdf:type :DeonticModality}}"""^^xsd:string].

#If an abstract eventuality does not subsist, then all its partial instantiations also do not subsist and all its full instantiations  
#do not really exist. Conversely, if the ontology states that one of them does, a contradiction is inferred.
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{<<<<?ea rdf:type :Subsist>> rdf:type :false>> :is-in-contradiction-with 
								  <<<<?e rdf:type ?M>> rdf:type :true>>}
						WHERE{<<?ea rdf:type :Subsist>> rdf:type :false. ?e :instantiates+ ?ea. 
							  ?e rdf:type ?M. VALUES ?M{:Rexist :Subsist}}"""^^xsd:string].

#If the knowledge graph states that a certain eventuality is prohibited (i.e., not permitted), and another eventuality that instantiates
#the former is, instead, permitted, then a conflict is inferred.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?ep rdf:type :Permitted>> rdf:type :true>> :is-in-conflict-with <<<<?enp rdf:type :Permitted>> rdf:type :false>>}
	WHERE{?ep rdf:type :Permitted; :instantiates+ ?enp. <<?enp rdf:type :Permitted>> rdf:type :false}"""^^xsd:string].

#If it is necessary for the thematic role of a given eventuality to have a specific value, but there is another more abstract eventuality 
#that features that value in the same thematic role and is prohibited, then the fact that the latter is prohibited is-necessarily-violated-by
#the fact that it is necessary for that thematic role to have that value.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?ep rdf:type :Permitted>> rdf:type :false>> :is-necessarily-violated-by
			  <<<<?en ?tr ?v>> rdf:type :necessary>>}
	WHERE{?tr rdf:type :ThematicRole. ?ep ?tr ?v. <<?ep rdf:type :Permitted>> rdf:type :false.
		  ?en :instantiates ?ep. <<?en ?tr ?v>> rdf:type :necessary}"""].


#===========================================================================================================================================================
# Axiomatization of ¬, ∧, and ∨.
#===========================================================================================================================================================

#If a conjunction holds true, then each of its conjuncts also does.
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{?s1 ?p1 ?o1. ?s2 ?p2 ?o2.}
						WHERE{<<?s1 ?p1 ?o1>> :conjunction <<?s2 ?p2 ?o2>>}"""].

#De Morgan's laws ¬(P1∧P2)→(¬P1∨¬P2) and ¬(P1∨P2)→(¬P1∧¬P2)
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{<<?t1 a ?vn1>> ?doc <<?t2 a ?vn2>>}
						WHERE{<<<<?t1 a ?v1>> ?cod <<?t2 a ?v2>>>> rdf:type :false.
							  BIND(IF(?cod=:conjunction,:disjunction,
								   IF(?cod=:disjunction,:conjunction,?doc)) AS ?doc)
							  FILTER(BOUND(?doc))
							  BIND(IF(?v1=:false,:true,:false) AS ?vn1)
							  BIND(IF(?v2=:false,:true,:false) AS ?vn2)}"""].

#Disjunctive Syllogism: ((P1∨P2)∧¬P1)→P2
[rdf:type :InferenceRule; 
	:has-sparql-code """CONSTRUCT{?t2 rdf:type ?v2}
						WHERE{{<<<<?s ?p ?o>> rdf:type ?v1>> :disjunction <<?t2 rdf:type ?v2>>}UNION
							  {<<?t2 rdf:type ?v2>> :disjunction <<<<?s ?p ?o>> rdf:type ?v1>>}
							  FILTER((?v1=:false&&EXISTS{?s ?p ?o})||(?v1=:true&&EXISTS{<<?s ?p ?o>> rdf:type :false}))}"""].


#===========================================================================================================================================================
# Axiomatization of predicates 'not', 'and', and 'or' with respect to the Rexist and Subsist modalities.
#===========================================================================================================================================================

#If two eventualities are related by 'not', then if one of them Rexist (or Subsist), the other does not and vice versa.
#∀e,en[not(e,en)→(Subsist(e)↔¬Subsist(en))]∧∀e,en[not(e,en)→(Rexist(e)↔¬Rexist(en))]
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s rdf:type ?o}
						WHERE{?e :not|^:not ?ne. VALUES ?M{:Rexist :Subsist}
							  BIND(IF(EXISTS{?e rdf:type ?M}, <<?ne rdf:type ?M>>, IF(EXISTS{<<?e rdf:type ?M>> rdf:type :false}, ?ne, ?s)) AS ?s)
							  FILTER(BOUND(?s))BIND(IF(isTriple(?s), :false, ?M) AS ?o)}"""^^xsd:string].

#If three eventualities are related by 'and', then the first argument of 'and' Rexists (or Subsists) if and only if the other two do.
#∀ea,e1,e2[and(ea,e1,e2)=>(Rexist(ea)↔(Rexist(e1)∧Rexist(e2)))]∧∀ea,e1,e2[and(ea,e1,e2)=>(Subsist(ea)↔(Subsist(e1)∧Subsist(e2)))]
#NB. we could also include the Obligatory modality here, since this ontology accepts the axioms (M) and (C) from Goble's BDL logic. However, to improve
#readability, we prefer to keep this separate. The axiom relating {\tt and} with the {\tt Obligatory} modality is presented below.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?e1 rdf:type ?M. ?e2 rdf:type ?M}
	WHERE{?ea :and1 ?e1; :and2 ?e2; rdf:type ?M. VALUES ?M {:Rexist :Subsist}}"""].
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?ea rdf:type ?M}
	WHERE{?ea :and1 ?e1; :and2 ?e2. ?e1 rdf:type ?M. ?e2 rdf:type ?M. VALUES ?M {:Rexist :Subsist}}"""].

#If three eventualities are related by 'or', then the first argument of 'or' Rexists (or Subsists) if and only if at least one of the other two does.
#∀eo,e1,e2[or(eo,e1,e2)=>(Rexist(eo)↔(Rexist(e1)∨Rexist(e2)))]∧∀eo,e1,e2[or(eo,e1,e2)=>(Subsist(eo)↔(Subsist(e1)∨Subsist(e2)))]
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?e1 rdf:type ?M>> rdf:type :true>> :disjunction <<<<?e2 rdf:type ?M>> rdf:type :true>>}
	WHERE{?eo :or1 ?e1; :or2 ?e2; rdf:type ?M. VALUES ?M {:Rexist :Subsist}}"""].
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?eo rdf:type ?M}
	WHERE{?eo :or1 ?e1; :or2 ?e2. 
		  {?e1 rdf:type ?M}UNION{?e2 rdf:type ?M}UNION{<<<<?e1 rdf:type ?M>> rdf:type :true>> :disjunction <<<<?e2 rdf:type ?M>> rdf:type :true>>} 
		  VALUES ?M{:Rexist :Subsist}}"""].


#===========================================================================================================================================================
# Axiomatization of the predicate 'not' with respect to the deontic modalities: the Deontic Traditional Scheme
#===========================================================================================================================================================

#If an eventuality is permitted, its opposite eventuality is not obligatory and vice versa: ∀e,en[not(e,en)→(Obligatory(e)↔¬Permitted(en))]
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s rdf:type ?o}
						WHERE{?e :not|^:not ?ne.
							  VALUES ?m{:Obligatory :Permitted} VALUES ?om{:Obligatory :Permitted}FILTER(?m!=?om)
							  BIND(IF(EXISTS{?e rdf:type ?m},<<?ne rdf:type ?om>>,IF(EXISTS{<<?e rdf:type ?m>> rdf:type :false},?ne,?s))AS ?s)
							  FILTER(BOUND(?s))BIND(IF(isTriple(?s),:false,?om)AS ?o)}"""^^xsd:string].

#If an eventuality is optional, then neither it nor its negation is obligatory (and therefore both are permitted, as established by the previous rule).
#∀e,en[not(en,e)→(Optional(e)↔(¬Obligatory(e)∧¬Obligatory(en)))]
#Unlike the previous rule, this case requires two SPARQL* rules, each implementing one direction of the bi-implication (↔).
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{<<?e rdf:type :Obligatory>> rdf:type :false. <<?ne rdf:type :Obligatory>> rdf:type :false.}
						WHERE{?e :not|^:not ?ne. ?e rdf:type :Optional}"""^^xsd:string].
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?e rdf:type :Optional. ?ne rdf:type :Optional}
						WHERE{?e :not|^:not ?ne. 
							  <<?e rdf:type :Obligatory>> rdf:type :false. <<?ne rdf:type :Obligatory>> rdf:type :false}"""^^xsd:string].

#If an eventuality is obligatory, then it is also permitted (and if it is not permitted, then it is not obligatory): ∀e[Obligatory(e)→Permitted(e)]
[rdf:type :InferenceRule;
	:has-sparql-code """CONSTRUCT{?s rdf:type ?o}
		WHERE{{?e rdf:type :Obligatory. BIND(?e AS ?s)BIND(:Permitted AS ?o)}UNION
			  {<<?e rdf:type :Permitted>> rdf:type :false. BIND(<<?e rdf:type :Obligatory>> AS ?s)BIND(:false AS ?o)}}"""^^xsd:string].


#===========================================================================================================================================================
# Axiomatization of the predicates 'and' and 'or' with respect to the deontic modalities.
#===========================================================================================================================================================

#If three eventualities are related by 'and', then the first argument of 'and' is Obligatory if and only if the other two are.
#∀ea,e1,e2[and(ea,e1,e2)=>(Obligatory(ea)↔(Obligatory(e1)∧Obligatory(e2)))]
#NB. We could have merged these rules with those for the Rexist and Subsist modalities shown above. However, to improve
#readability, we prefer to keep this separate. The axiom relating {\tt and} with the {\tt Obligatory} modality is presented below.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?e1 rdf:type :Obligatory. ?e2 rdf:type :Obligatory}
	WHERE{?ea :and1 ?e1; :and2 ?e2; rdf:type :Obligatory}"""].
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?ea rdf:type :Obligatory}
	WHERE{?ea :and1 ?e1; :and2 ?e2. ?e1 rdf:type :Obligatory. ?e2 rdf:type :Obligatory}"""].

#We add the SPARQL* implementation of the axiom DDS from BDL logic, needed to derive the Smith argument and its variants.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{?e1 rdf:type :Obligatory}
	WHERE{{?eo :or1 ?e1; :or2 ?e2}UNION{?eo :or1 ?e2; :or2 ?e1}
		  ?eo rdf:type :Obligatory. ?en2 :not|^:not ?e2. ?en2 rdf:type :Obligatory.}"""].


#===========================================================================================================================================================
# Compliance and violations
#===========================================================================================================================================================

:is-complied-with-by rdf:type rdf:Property; rdfs:domain rdf:Statement; rdfs:range rdf:Statement.
:is-violated-by rdf:type rdf:Property; rdfs:domain rdf:Statement; rdfs:range rdf:Statement.

#If a really existing eventuality ?e instantiates an obligation ?eo, then ?eo is complied with by ?e.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?eo rdf:type :Obligatory>> rdf:type :true>> :is-complied-with-by <<<<?e rdf:type ?m>> rdf:type :true>>}
	WHERE{?eo rdf:type :Obligatory. ?e rdf:type ?m; :instantiates+ ?eo. VALUES ?m {:Rexist :Subsist}}"""].

#If a really existing eventuality ?e instantiates a non-permission (i.e., a prohibition) ?ep, then ?ep is violated by ?e.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?ep rdf:type :Permitted>> rdf:type :false>> :is-violated-by <<<<?e rdf:type ?m>> rdf:type :true>>}
	WHERE{<<?ep rdf:type :Permitted>> rdf:type :false. ?e rdf:type ?m; :instantiates+ ?ep. VALUES ?m {:Rexist :Subsist}}"""].

#If an obligation ?eo instantiates an abstract eventuality ?e that does not subsist, then ?eo is violated by ?e.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?eo rdf:type :Obligatory>> rdf:type :true>> :is-violated-by <<<<?e rdf:type :Subsist>> rdf:type :false>>}
	WHERE{?eo rdf:type :Obligatory. ?eo :instantiates+ ?e. <<?e rdf:type :Subsist>> rdf:type :false}"""].
	
#If a non-permission (i.e., a prohibition) ?ep instantiates an abstract eventuality ?e that does not subsist, then ?ep is complied with by ?e.
[rdf:type :InferenceRule; :has-sparql-code """
	CONSTRUCT{<<<<?ep rdf:type :Permitted>> rdf:type :false>> :is-complied-with-by <<<<?e rdf:type :Subsist>> rdf:type :false>>}
	WHERE{<<?ep rdf:type :Permitted>> rdf:type :false. ?ep :instantiates+ ?e. <<?e rdf:type :Subsist>> rdf:type :false}"""].




